Rocket.Surgery.Build.Information.GitVersion
Rocket.Surgery.Build.Information.GitVersion.AssemblySemVer.get -> string
Rocket.Surgery.Build.Information.GitVersion.BranchName.get -> string
Rocket.Surgery.Build.Information.GitVersion.BuildMetaData.get -> string
Rocket.Surgery.Build.Information.GitVersion.BuildMetaDataPadded.get -> string
Rocket.Surgery.Build.Information.GitVersion.CommitDate.get -> string
Rocket.Surgery.Build.Information.GitVersion.CommitsSinceVersionSource.get -> int
Rocket.Surgery.Build.Information.GitVersion.CommitsSinceVersionSourcePadded.get -> string
Rocket.Surgery.Build.Information.GitVersion.Equals(Rocket.Surgery.Build.Information.GitVersion other) -> bool
Rocket.Surgery.Build.Information.GitVersion.FullBuildMetaData.get -> string
Rocket.Surgery.Build.Information.GitVersion.FullSemVer.get -> string
Rocket.Surgery.Build.Information.GitVersion.HasVersion.get -> bool
Rocket.Surgery.Build.Information.GitVersion.InformationalVersion.get -> string
Rocket.Surgery.Build.Information.GitVersion.LegacySemVer.get -> string
Rocket.Surgery.Build.Information.GitVersion.LegacySemVerPadded.get -> string
Rocket.Surgery.Build.Information.GitVersion.Major.get -> int
Rocket.Surgery.Build.Information.GitVersion.MajorMinorPatch.get -> string
Rocket.Surgery.Build.Information.GitVersion.Minor.get -> int
Rocket.Surgery.Build.Information.GitVersion.NuGetVersion.get -> string
Rocket.Surgery.Build.Information.GitVersion.NuGetVersionV2.get -> string
Rocket.Surgery.Build.Information.GitVersion.Patch.get -> int
Rocket.Surgery.Build.Information.GitVersion.PreReleaseTag.get -> string
Rocket.Surgery.Build.Information.GitVersion.PreReleaseTagWithDash.get -> string
Rocket.Surgery.Build.Information.GitVersion.RepositoryUrl.get -> string
Rocket.Surgery.Build.Information.GitVersion.SemVer.get -> string
Rocket.Surgery.Build.Information.GitVersion.Sha.get -> string
Rocket.Surgery.Build.Information.InformationProvider
Rocket.Surgery.Build.Information.InformationProvider.GetValue(string key) -> System.Collections.Generic.IEnumerable<string>
Rocket.Surgery.Build.Information.InformationProvider.HasPrefix(string key) -> bool
Rocket.Surgery.Build.Information.InformationProvider.InformationProvider(System.Reflection.Assembly assembly) -> void
override Rocket.Surgery.Build.Information.GitVersion.Equals(object obj) -> bool
override Rocket.Surgery.Build.Information.GitVersion.GetHashCode() -> int
static Rocket.Surgery.Build.Information.GitVersion.For(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies) -> System.Collections.Generic.IDictionary<System.Reflection.Assembly, Rocket.Surgery.Build.Information.GitVersion>
static Rocket.Surgery.Build.Information.GitVersion.For(System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> typeInfos) -> System.Collections.Generic.IDictionary<System.Reflection.Assembly, Rocket.Surgery.Build.Information.GitVersion>
static Rocket.Surgery.Build.Information.GitVersion.For(System.Collections.Generic.IEnumerable<System.Type> types) -> System.Collections.Generic.IDictionary<System.Reflection.Assembly, Rocket.Surgery.Build.Information.GitVersion>
static Rocket.Surgery.Build.Information.GitVersion.For(System.Reflection.Assembly assembly) -> Rocket.Surgery.Build.Information.GitVersion
static Rocket.Surgery.Build.Information.GitVersion.For(System.Reflection.TypeInfo typeInfo) -> Rocket.Surgery.Build.Information.GitVersion
static Rocket.Surgery.Build.Information.GitVersion.For(System.Type type) -> Rocket.Surgery.Build.Information.GitVersion
static Rocket.Surgery.Build.Information.GitVersion.For(params System.Reflection.Assembly[] assemblies) -> System.Collections.Generic.IDictionary<System.Reflection.Assembly, Rocket.Surgery.Build.Information.GitVersion>
static Rocket.Surgery.Build.Information.GitVersion.For(params System.Reflection.TypeInfo[] typeInfos) -> System.Collections.Generic.IDictionary<System.Reflection.Assembly, Rocket.Surgery.Build.Information.GitVersion>
static Rocket.Surgery.Build.Information.GitVersion.For(params System.Type[] types) -> System.Collections.Generic.IDictionary<System.Reflection.Assembly, Rocket.Surgery.Build.Information.GitVersion>
static Rocket.Surgery.Build.Information.GitVersion.operator !=(Rocket.Surgery.Build.Information.GitVersion version1, Rocket.Surgery.Build.Information.GitVersion version2) -> bool
static Rocket.Surgery.Build.Information.GitVersion.operator ==(Rocket.Surgery.Build.Information.GitVersion version1, Rocket.Surgery.Build.Information.GitVersion version2) -> bool